#!/usr/bin/env python

"""
A WSGI server for Hurricane.
"""

import os
import sys
from datetime import datetime
from cStringIO import StringIO
from types import GeneratorType
from optparse import OptionParser
from hurricane import Gateway, Message
from hurricane.erl_codec import SocketWrapper, Atom, Binary
from urlparse import urlparse

def to_wsgi_dict(data):
    """
    Transform the data given by Hurricane into a WSGI env dictionary.
    """
    wsgi_dict = {
        'SCRIPT_NAME': '',
        'wsgi.input': StringIO(),
        'wsgi.errors': sys.stderr,
        'wsgi.multiprocess': False,
        'wsgi.multithread': False,
        'wsgi.run_once': False,
        'wsgi.version': (1, 0)}
    for key, value in data:
        if key.name == 'listen_port':
            wsgi_dict['SERVER_PORT'] = str(value)
        elif key.name == 'server_name':
            wsgi_dict['SERVER_NAME'] = value
        elif key.name == 'scheme':
            wsgi_dict['wsgi.url_scheme'] = value.name
        elif key.name == 'version':
            wsgi_dict['SERVER_PROTOCOL'] = 'HTTP/%s.%s' % value
        elif key.name == 'method':
            wsgi_dict['REQUEST_METHOD'] = value.name
        elif key.name == 'path':
            wsgi_dict['REQUEST_URI'] = value
            path_parts = urlparse(value)
            wsgi_dict['PATH_INFO'] = path_parts[2]
            wsgi_dict['QUERY_STRING'] = path_parts[4]
        elif key.name == 'headers':
            for header_key, header_value in value:
                if isinstance(header_key, Atom):
                    header_key = header_key.name.lower()
                else:
                    header_key = header_key.lower()

                if header_key == 'content-length':
                    wsgi_dict['CONTENT_LENGTH'] = int(header_value)
                elif header_key == 'content-type':
                    wsgi_dict['CONTENT_TYPE'] = header_value

                header_name = 'HTTP_%s' % (
                    header_key.replace('-', '_').upper())
                wsgi_dict[header_name] = header_value
        elif key.name == 'body' and isinstance(value, Binary):
            wsgi_dict['wsgi.input'].write(value.data)
            wsgi_dict['wsgi.input'].seek(0)

    return wsgi_dict

class WsgiMeta(object):
    """
    A callable object used to give a WSGI application the ability to
    set the response code and headers.
    """

    def __init__(self):
        """
        Initialize the code and headers with default values.
        """
        self.code = '200 OK'
        self.headers = []

    def __call__(self, code, headers):
        """
        Call the object to set a new code and headers.
        """
        self.code = code
        self.headers = headers

def parse_args():
    """
    Parse command line arguments. The 'app' parameter determines which
    Python module the 'application' function (WSGI entry point) should
    be loaded and called. The 'type' parameters determines if this
    server is stdio (managed by Hurricane) or TCP (standalone). If
    standalone, the 'host' and 'port' must be specified so that the
    WSGI Gateway can connect to Hurricane.
    """
    parser = OptionParser()
    parser.add_option(
        '--app',
        dest='app',
        type='string',
        help='run the app contained within the module (default: main)',
        metavar='FILE',
        default='main')
    parser.add_option(
        '--type',
        dest='type',
        type='string',
        help='managed by Hurricane (stdio) or standalone (default: tcp)',
        default='tcp')
    parser.add_option(
        '--host',
        dest='host',
        type='string',
        help='the Hurricane host (default: 127.0.0.1)',
        default='127.0.0.1')
    parser.add_option(
        '--port',
        dest='port',
        type='int',
        help='the Hurricane host (default: 3000)',
        default=3000)
    parser.add_option(
        '--process-group',
        dest='process_group',
        type='string',
        help='the Hurricane process group to join (default: http_handler)',
        default='http_handler')
    (options, _args) = parser.parse_args()
    return options

def main():
    """
    Main entry point to the WSGI Gateway. Loads the WSGI application,
    connects to Hurricane, and enters an infinite loop to serve
    requests.
    """
    sys.path.append(os.getcwd())
    args = parse_args()
    app_module = __import__(args.app, globals(), locals(), ['application'])
    app = getattr(app_module, 'application')

    if args.type == 'tcp':
        gateway = Gateway(SocketWrapper(args.host, args.port))
        gateway.register_server(args.process_group)
    else:
        gateway = Gateway()
        gateway.send_ready_signal()

    print 'Hurricane WSGI Server started (Hurricane @ %s:%s)' % (
        args.host, args.port)

    while True:
        httpreq = gateway.recv()
        wsgienv = to_wsgi_dict(httpreq.data)
        wsgienv['hurricane.gateway'] = gateway

        httpresp = Message()
        httpresp.type = 'response'
        httpresp.destination = httpreq.destination
        httpresp.tag = httpreq.tag

        if wsgienv.get('HTTP_EXPECT', '').lower() == '100-continue':
            httpresp.data = ('100 Continue', [], None)
            gateway.send(httpresp)
            continue

        meta = WsgiMeta()
        result = app(wsgienv, meta)
        if not isinstance(result, basestring):
            result = ''.join(result)
        httpresp.data = (meta.code, meta.headers, Binary(result))

        print '[%s] %s %s %s %s' % (
            datetime.now(),
            wsgienv['SERVER_PROTOCOL'],
            wsgienv['REQUEST_METHOD'],
            wsgienv['REQUEST_URI'],
            meta.code)

        gateway.send(httpresp)

if __name__ == '__main__':
    main()
